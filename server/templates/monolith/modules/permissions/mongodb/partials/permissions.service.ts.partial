// <!-- PERMISSIONS_IMPORTS -->
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';
import { Permission, PermissionDocument } from './schemas/permission.schema';

// <!-- PERMISSIONS_CONSTRUCTOR_ARGS -->
@InjectModel(Permission.name)
private permissionModel: Model<PermissionDocument>,

// <!-- PERMISSIONS_SERVICE_METHODS -->
// ⚠️ ================================== WARNING ==================================
// ⚠️ DEVELOPMENT ONLY METHOD - DELETE THIS BEFORE PRODUCTION DEPLOYMENT
// ⚠️ ================================== WARNING ==================================
async initializeDefaultPermissions(): Promise<{ message: string }> {
    const defaultPermissions = [
        // Permission Management
        { name: 'permissions:read', description: 'View permissions' },
        { name: 'permissions:create', description: 'Create permissions' },
        { name: 'permissions:update', description: 'Update permissions' },
        { name: 'permissions:delete', description: 'Delete permissions' },
    ];

    for (const permissionData of defaultPermissions) {
        const existing = await this.permissionModel.findOne({
            name: permissionData.name,
        });
        if (!existing) {
            await this.create(permissionData);
        }
    }

    return { message: 'Succesfully initialized permissions' };
}

async create(createPermissionDto: CreatePermissionDto): Promise<Permission> {
    const existingPermission = await this.permissionModel.findOne({
        name: createPermissionDto.name,
    });

    if (existingPermission) {
        throw new ConflictException('Permission with this name already exists');
    }

    const permission = new this.permissionModel(createPermissionDto);
    return permission.save();
  }

async findAll(): Promise<Permission[]> {
    return this.permissionModel.find().exec();
}

async findOne(id: string): Promise<Permission> {
    const permission = await this.permissionModel.findById(id).exec();
    if (!permission) {
      throw new NotFoundException('Permission not found');
    }
    return permission;
}

async findByName(name: string): Promise<Permission | null> {
    return this.permissionModel.findOne({ name }).exec();
}

async findByNames(names: string[]): Promise<Permission[]> {
    return this.permissionModel.find({ name: { $in: names } }).exec();
}

async remove(id: string): Promise<void> {
    const result = await this.permissionModel.findByIdAndDelete(id).exec();
    if (!result) {
        throw new NotFoundException('Permission not found');
    }
}